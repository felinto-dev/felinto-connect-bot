import type { SharedServices } from '../index';

export interface SessionInfo {
  sessionId: string;
  createdAt: number;
  lastUsed: number;
  pageInfo?: {
    url: string;
    title: string;
  };
}

export class SessionSyncService {
  private sharedServices: SharedServices;
  private storageKey = 'felinto-playground-session';
  private checkInterval: number | null = null;
  private onSessionChangeCallback?: (sessionInfo: SessionInfo | null) => void;

  constructor(sharedServices: SharedServices) {
    this.sharedServices = sharedServices;
    this.setupStorageListener();
  }

  /**
   * Configurar listener para mudan√ßas no localStorage
   */
  private setupStorageListener(): void {
    window.addEventListener('storage', (e) => {
      if (e.key === this.storageKey) {
        const sessionInfo = this.getStoredSession();
        console.log('üì° Mudan√ßa de sess√£o detectada via storage:', sessionInfo);
        this.notifySessionChange(sessionInfo);
      }
    });
  }

  /**
   * Armazenar informa√ß√µes da sess√£o
   */
  public storeSession(sessionInfo: SessionInfo): void {
    const data = {
      ...sessionInfo,
      lastUsed: Date.now()
    };
    
    localStorage.setItem(this.storageKey, JSON.stringify(data));
    console.log('üíæ Sess√£o armazenada:', data);
    
    // N√ÉO notificar mudan√ßa aqui para evitar loops
    // Apenas o storage event vai notificar outras p√°ginas
  }

  /**
   * Obter sess√£o armazenada
   */
  public getStoredSession(): SessionInfo | null {
    try {
      const stored = localStorage.getItem(this.storageKey);
      if (!stored) return null;
      
      const sessionInfo = JSON.parse(stored) as SessionInfo;
      
      // Verificar se a sess√£o n√£o est√° muito antiga (24 horas)
      const maxAge = 24 * 60 * 60 * 1000; // 24 horas
      if (Date.now() - sessionInfo.createdAt > maxAge) {
        this.clearStoredSession();
        return null;
      }
      
      return sessionInfo;
    } catch (error) {
      console.error('‚ùå Erro ao ler sess√£o do localStorage:', error);
      this.clearStoredSession();
      return null;
    }
  }

  /**
   * Limpar sess√£o armazenada
   */
  public clearStoredSession(): void {
    localStorage.removeItem(this.storageKey);
    console.log('üóëÔ∏è Sess√£o removida do localStorage');
    // N√ÉO notificar aqui para evitar loops - storage event vai notificar
  }

  /**
   * Verificar se sess√£o ainda est√° ativa no backend
   */
  public async validateStoredSession(): Promise<SessionInfo | null> {
    const storedSession = this.getStoredSession();
    if (!storedSession) return null;

    try {
      console.log('üîç Validando sess√£o armazenada:', storedSession.sessionId);
      
      // Tentar fazer uma chamada simples para verificar se a sess√£o ainda existe
      // Usando o endpoint de status de grava√ß√£o como health check
      const response = await this.sharedServices.apiService.getRecordingStatus(storedSession.sessionId);
      
      // Se chegou at√© aqui, a sess√£o ainda √© v√°lida
      console.log('‚úÖ Sess√£o ainda √© v√°lida');
      
      // Atualizar lastUsed
      this.storeSession({
        ...storedSession,
        lastUsed: Date.now()
      });
      
      return storedSession;
      
    } catch (error: any) {
      console.warn('‚ö†Ô∏è Sess√£o armazenada n√£o √© mais v√°lida:', error.message);
      
      // Se erro indica sess√£o expirada, remover do storage silenciosamente
      if (error.message?.includes('Sess√£o n√£o encontrada') || 
          error.message?.includes('sessionExpired') ||
          error.message?.includes('Sess√£o foi fechada')) {
        
        // Limpar sem logs para evitar spam
        localStorage.removeItem(this.storageKey);
      }
      
      return null;
    }
  }

  /**
   * Iniciar verifica√ß√£o peri√≥dica de sess√µes ativas
   */
  public startSessionCheck(): void {
    // DESABILITADO temporariamente para evitar loops
    // A verifica√ß√£o ser√° feita apenas sob demanda
    console.log('‚ÑπÔ∏è Verifica√ß√£o peri√≥dica desabilitada para evitar loops');
  }

  /**
   * Parar verifica√ß√£o peri√≥dica
   */
  public stopSessionCheck(): void {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
      console.log('‚è∏Ô∏è Verifica√ß√£o peri√≥dica de sess√£o parada');
    }
  }

  /**
   * Configurar callback para mudan√ßas de sess√£o
   */
  public onSessionChange(callback: (sessionInfo: SessionInfo | null) => void): void {
    this.onSessionChangeCallback = callback;
  }

  /**
   * Notificar mudan√ßa de sess√£o
   */
  private notifySessionChange(sessionInfo: SessionInfo | null): void {
    if (this.onSessionChangeCallback) {
      this.onSessionChangeCallback(sessionInfo);
    }
  }

  /**
   * Obter sess√£o ativa (com valida√ß√£o)
   */
  public async getActiveSession(): Promise<SessionInfo | null> {
    // Primeiro verificar se h√° sess√£o armazenada
    const storedSession = this.getStoredSession();
    if (!storedSession) return null;

    // Validar se ainda est√° ativa
    return await this.validateStoredSession();
  }

  /**
   * Marcar sess√£o como usada recentemente
   */
  public touchSession(): void {
    const session = this.getStoredSession();
    if (session) {
      this.storeSession({
        ...session,
        lastUsed: Date.now()
      });
    }
  }

  /**
   * Notificar outras p√°ginas sobre nova sess√£o
   */
  public notifySessionCreated(sessionId: string, pageInfo?: any): void {
    this.storeSession({
      sessionId,
      createdAt: Date.now(),
      lastUsed: Date.now(),
      pageInfo
    });
    
    console.log('üì° Notifica√ß√£o de nova sess√£o enviada:', sessionId);
  }

  /**
   * Cleanup
   */
  public destroy(): void {
    this.stopSessionCheck();
    this.onSessionChangeCallback = undefined;
    console.log('üßπ SessionSyncService destru√≠do');
  }
}
