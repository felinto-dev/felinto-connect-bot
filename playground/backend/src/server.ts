import express, { Request, Response } from 'express';
import { WebSocketServer, WebSocket } from 'ws';
import cors from 'cors';
import http from 'http';
import { execSync } from 'child_process';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { marked } from 'marked';
import { newPage } from '@felinto-dev/felinto-connect-bot';
import SessionManager from './session-manager.js';
import { RecordingService } from './recording/RecordingService.js';
import { ExportService } from './recording/ExportService.js';
import { PlaybackService } from './recording/PlaybackService.js';
import { 
  BroadcastMessage, 
  SessionConfig,
  RecordingConfig,
  RecordingData,
  RecordingStatus,
  StartRecordingResponse,
  StopRecordingResponse,
  PauseRecordingResponse,
  RecordingStatusResponse,
  ExportOptions,
  ExportResult,
  PlaybackConfig,
  PlaybackStatus
} from './types.js';

const app = express();
// SessionManager ser√° inicializado ap√≥s a fun√ß√£o broadcast estar dispon√≠vel
let sessionManager: SessionManager;
const port = 3001;

// Store para grava√ß√µes ativas
const activeRecordings = new Map<string, RecordingData>();
// Store para servi√ßos de grava√ß√£o ativos
const activeRecordingServices = new Map<string, RecordingService>();
// Store para servi√ßos de reprodu√ß√£o ativos
const activePlaybackServices = new Map<string, PlaybackService>();

// Fun√ß√£o para gerar ID √∫nico de grava√ß√£o
function generateRecordingId(): string {
  return `recording_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// Get current directory for ES modules
const __dirname = dirname(fileURLToPath(import.meta.url));

// Configure marked options
marked.setOptions({
  gfm: true, // GitHub Flavored Markdown
  breaks: true, // Convert \n to <br>
});

// Middleware
app.use(cors());
app.use(express.json());

// HTTP Server
const server = http.createServer(app);

// WebSocket Server
const wss = new WebSocketServer({ server, path: '/ws' });

// Store active connections
const clients = new Set<WebSocket>();

// Function to detect possible Chrome endpoints
function detectPossibleEndpoints(): string[] {
  const endpoints = [
    'docker.for.mac.localhost:9222', // Funciona melhor no macOS com Docker Desktop
    'host.docker.internal:9222',
    'localhost:9222',
    '127.0.0.1:9222'
  ];
  
  try {
    // Try to get gateway IP
    const gatewayIP = execSync('ip route show | grep default | awk \'{print $3}\' 2>/dev/null', {
      encoding: 'utf8',
      timeout: 2000
    }).trim();
    
    if (gatewayIP && gatewayIP !== '127.0.0.1') {
      endpoints.splice(1, 0, `${gatewayIP}:9222`); // Add after host.docker.internal
    }
  } catch (error) {
    // Fallback to common Docker gateway
    endpoints.splice(1, 0, '172.17.0.1:9222');
  }
  
  return endpoints;
}

// WebSocket connection handler
wss.on('connection', (ws: WebSocket) => {
  console.log('Cliente conectado via WebSocket');
  clients.add(ws);

  ws.on('close', () => {
    console.log('Cliente desconectado');
    clients.delete(ws);
  });

  ws.on('error', (error: Error) => {
    console.error('Erro WebSocket:', error);
    clients.delete(ws);
  });
});

// Broadcast function with retry mechanism for better reliability
function broadcast(message: BroadcastMessage) {
  const data = JSON.stringify(message);
  let sentCount = 0;
  
  clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(data);
      sentCount++;
    }
  });
  
  // If no clients received the message and it's an important message, retry after a short delay
  if (sentCount === 0 && (message.type === 'success' || message.type === 'error')) {
    setTimeout(() => {
      let retrySentCount = 0;
      clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(data);
          retrySentCount++;
        }
      });
    }, 100); // 100ms delay for retry
  }
}

// Initialize SessionManager with broadcast function
sessionManager = new SessionManager(broadcast);

// Health check endpoint
app.get('/api/health', (req: Request, res: Response) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Documentation endpoint
app.get('/api/docs', (req: Request, res: Response) => {
  try {
    const readmePath = join(__dirname, '../../README.md');
    const readmeContent = readFileSync(readmePath, 'utf-8');
    const htmlContent = marked.parse(readmeContent);
    
    res.json({ 
      content: htmlContent,
      markdown: readmeContent,
      lastModified: new Date().toISOString()
    });
  } catch (error: any) {
    console.error('Erro ao ler README.md:', error);
    res.status(500).json({ 
      error: 'N√£o foi poss√≠vel carregar a documenta√ß√£o',
      details: error.message 
    });
  }
});

// Check Chrome connection endpoint
app.get('/api/chrome/check', async (req: Request, res: Response) => {
  try {
    broadcast({ type: 'info', message: 'Verificando conex√£o com Chrome...' });
    
    // Multiple endpoints to try (detected dynamically)
    const endpoints = detectPossibleEndpoints();
    broadcast({ type: 'info', message: `üìç Endpoints detectados: ${endpoints.join(', ')}` });
    
    let successEndpoint: string | null = null;
    let chromeInfo: any = null;
    let lastError: string | null = null;

    // Try each endpoint
    for (const endpoint of endpoints) {
      try {
        broadcast({ type: 'info', message: `üîç Testando ${endpoint}...` });
        
        const response = await fetch(`http://${endpoint}/json/version`, {
          signal: AbortSignal.timeout(2000)
        });
        
        if (response.ok) {
          chromeInfo = await response.json();
          successEndpoint = endpoint;
          broadcast({ type: 'success', message: `‚úÖ Chrome encontrado em ${endpoint}! A flag --remote-debugging-address=0.0.0.0 est√° funcionando!` });
          break;
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
        
      } catch (error: any) {
        lastError = error.message;
        broadcast({ type: 'info', message: `‚ùå ${endpoint}: ${error.message}` });
        continue;
      }
    }

    if (successEndpoint) {
      // Cache the detected endpoint
      detectedChromeEndpoint = `ws://${successEndpoint}`;
      
      res.json({ 
        available: true, 
        endpoint: `ws://${successEndpoint}`,
        chromeVersion: chromeInfo.Browser,
        detectedAt: successEndpoint
      });
    } else {
      broadcast({ 
        type: 'warning', 
        message: '‚ö†Ô∏è Chrome n√£o detectado em nenhum endpoint' 
      });
      
      // Platform-specific instructions
      const isMac = process.platform === 'darwin' || req.headers['user-agent']?.includes('Mac');
      const instructions = isMac 
        ? 'Execute no terminal do host (macOS): /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222 --remote-debugging-address=0.0.0.0 --disable-web-security --disable-features=VizDisplayCompositor'
        : 'Execute no terminal do host: google-chrome --remote-debugging-port=9222 --remote-debugging-address=0.0.0.0 --disable-web-security';
      
      res.json({ 
        available: false, 
        error: lastError,
        testedEndpoints: endpoints,
        instructions,
        troubleshooting: isMac ? [
          '1. ESSENCIAL: Use --remote-debugging-address=0.0.0.0 para permitir conex√µes do container',
          '2. Certifique-se de que o Chrome est√° rodando no macOS (host)',
          '3. Verifique permiss√µes: Ajustes > Privacidade e Seguran√ßa > Rede Local',
          '4. Desative firewall temporariamente para testar',
          '5. Tente reiniciar o Docker Desktop se necess√°rio'
        ] : [
          '1. ESSENCIAL: Use --remote-debugging-address=0.0.0.0 para permitir conex√µes do container',
          '2. Execute o comando de inicializa√ß√£o do Chrome no host',
          '3. Verifique se a porta 9222 n√£o est√° em uso',
          '4. Tente com --disable-web-security se necess√°rio'
        ]
      });
    }

  } catch (error: any) {
    broadcast({ type: 'error', message: `‚ùå Erro ao verificar Chrome: ${error.message}` });
    res.status(500).json({ error: error.message });
  }
});

// Store detected endpoint globally
let detectedChromeEndpoint: string | null = null;

// Execute session endpoint
app.post('/api/execute', async (req: Request, res: Response) => {
  try {
    const config = req.body;
    
    broadcast({ type: 'info', message: 'üöÄ Iniciando nova sess√£o...' });
    
    // Get the latest Chrome endpoint
    let chromeEndpoint = detectedChromeEndpoint;
    
    // If not cached, try to detect again
    if (!chromeEndpoint) {
      broadcast({ type: 'info', message: 'üîç Detectando Chrome...' });
      const endpoints = detectPossibleEndpoints();
      
      for (const endpoint of endpoints) {
        try {
          const response = await fetch(`http://${endpoint}/json/version`, {
            signal: AbortSignal.timeout(2000)
          });
          if (response.ok) {
            chromeEndpoint = `ws://${endpoint}`;
            detectedChromeEndpoint = chromeEndpoint;
            break;
          }
        } catch (error) {
          continue;
        }
      }
    }
    
    if (!chromeEndpoint) {
      throw new Error('Chrome n√£o detectado. Execute o comando de inicializa√ß√£o do Chrome no host.');
    }
    
    broadcast({ type: 'info', message: `üîó Usando endpoint: ${chromeEndpoint}` });
    
    // Force connection to detected Chrome endpoint
    const sessionConfig: SessionConfig = {
      ...config,
      browserWSEndpoint: chromeEndpoint,
      // Add debug logging
      $debug: true
    };

    broadcast({ type: 'info', message: `üìã Configura√ß√£o: ${JSON.stringify(sessionConfig, null, 2)}` });

    // Create page
    broadcast({ type: 'info', message: 'üîó Conectando ao Chrome...' });
    const page = await newPage(sessionConfig);

    broadcast({ type: 'success', message: '‚úÖ P√°gina criada com sucesso!' });
    broadcast({ type: 'info', message: 'üåê Chrome aberto e configurado' });

    // Get page info
    const url = await page.url();
    const title = await page.title();

    broadcast({ 
      type: 'success', 
      message: `üìç P√°gina atual: ${title || 'Sem t√≠tulo'} - ${url}` 
    });

    res.json({ 
      success: true, 
      message: 'Sess√£o iniciada com sucesso!',
      pageInfo: {
        url,
        title,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('Erro ao executar sess√£o:', error);
    
    let errorMessage = error.message;
    
    // Melhorar mensagens de erro para problemas de conex√£o Chrome
    if (error.message.includes('Failed to connect to browser') || error.message.includes('ECONNREFUSED')) {
      errorMessage = `‚ùå Erro de conex√£o com Chrome: Verifique se o Chrome est√° rodando com debug habilitado na porta 9222`;
      broadcast({ type: 'info', message: 'üí° Execute o comando: /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222 --remote-debugging-address=0.0.0.0' });
    } else if (error.message.includes('Unexpected server response: 404')) {
      errorMessage = `‚ùå Chrome n√£o encontrado: Verifique se foi iniciado com as flags corretas`;
      broadcast({ type: 'info', message: 'üí° Certifique-se de usar --remote-debugging-address=0.0.0.0' });
    }
    
    broadcast({ 
      type: 'error', 
      message: errorMessage
    });
    
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Create new session endpoint
app.post('/api/session/create', async (req: Request, res: Response) => {
  try {
    const config = req.body;
    
    // Get the latest Chrome endpoint
    let chromeEndpoint = detectedChromeEndpoint;
    
    // If not cached, try to detect again
    if (!chromeEndpoint) {
      broadcast({ type: 'info', message: 'üîç Detectando Chrome...' });
      const endpoints = detectPossibleEndpoints();
      
      for (const endpoint of endpoints) {
        try {
          const response = await fetch(`http://${endpoint}/json/version`, {
            signal: AbortSignal.timeout(2000)
          });
          if (response.ok) {
            chromeEndpoint = `ws://${endpoint}`;
            detectedChromeEndpoint = chromeEndpoint;
            break;
          }
        } catch (error) {
          continue;
        }
      }
    }
    
    if (!chromeEndpoint) {
      throw new Error('Chrome n√£o detectado. Execute o comando de inicializa√ß√£o do Chrome no host.');
    }
    
    // Force connection to detected Chrome endpoint
    const sessionConfig: SessionConfig = {
      ...config,
      browserWSEndpoint: chromeEndpoint,
      $debug: true
    };



    const session = await sessionManager.createSession(sessionConfig, broadcast);
    
    // Get initial page info
    const pageInfo = await sessionManager.getPageInfo(session.page);
    
    res.json({ 
      success: true, 
      sessionId: session.id,
      message: 'Sess√£o criada com sucesso!',
      pageInfo
    });

  } catch (error: any) {
    console.error('Erro ao criar sess√£o:', error);
    
    broadcast({ 
      type: 'error', 
      message: `‚ùå Erro ao criar sess√£o: ${error.message}`
    });
    
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Execute code in existing session
app.post('/api/session/execute', async (req: Request, res: Response) => {
  try {
    const { sessionId, code } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({ error: 'sessionId √© obrigat√≥rio' });
    }
    
    if (!code || typeof code !== 'string') {
      return res.status(400).json({ error: 'code √© obrigat√≥rio e deve ser uma string' });
    }

    const result = await sessionManager.executeCode(sessionId, code, broadcast);
    
    res.json({ 
      success: true, 
      message: 'C√≥digo executado com sucesso!',
      ...result
    });

  } catch (error: any) {
    console.error('Erro ao executar c√≥digo:', error);
    
    // Verificar se √© erro de sess√£o n√£o encontrada
    if (error.message.includes('Sess√£o n√£o encontrada')) {
      const sessionId = req.body.sessionId;
      broadcast({ 
        type: 'session_expired', 
        message: `‚ùå Sess√£o expirou ou foi removida. Crie uma nova sess√£o.`,
        sessionId: sessionId
      });
      
      res.status(404).json({ 
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true,
        message: 'A sess√£o expirou ou foi removida. Crie uma nova sess√£o.'
      });
    } else {
      broadcast({ 
        type: 'error', 
        message: `‚ùå Erro na execu√ß√£o: ${error.message}`
      });
      
      res.status(500).json({ 
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      });
    }
  }
});

// Take screenshot of session
app.post('/api/session/screenshot', async (req: Request, res: Response) => {
  try {
    const { sessionId, options = {} } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({ error: 'sessionId √© obrigat√≥rio' });
    }

    broadcast({ type: 'info', message: `üì∏ Capturando screenshot da sess√£o: ${sessionId}` });
    
    const screenshot = await sessionManager.takeScreenshot(sessionId, options);
    
    broadcast({ type: 'success', message: '‚úÖ Screenshot capturado!' });
    
    // Determinar o tipo de imagem baseado nas op√ß√µes
    const imageType = options.quality ? 'jpeg' : 'png';
    
    res.json({ 
      success: true, 
      screenshot: `data:image/${imageType};base64,${screenshot}`,
      message: 'Screenshot capturado com sucesso!'
    });

  } catch (error: any) {
    console.error('Erro ao capturar screenshot:', error);
    
    // Verificar se √© erro de sess√£o n√£o encontrada
    if (error.message.includes('Sess√£o n√£o encontrada')) {
      const sessionId = req.body.sessionId;
      broadcast({ 
        type: 'session_expired', 
        message: `‚ùå Sess√£o expirou ou foi removida. Crie uma nova sess√£o.`,
        sessionId: sessionId
      });
      
      res.status(404).json({ 
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true,
        message: 'A sess√£o expirou ou foi removida. Crie uma nova sess√£o.'
      });
    } else {
      broadcast({ 
        type: 'error', 
        message: `‚ùå Erro ao capturar screenshot: ${error.message}`
      });
      
      res.status(500).json({ 
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      });
    }
  }
});

// Remove session
app.delete('/api/session/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    const removed = await sessionManager.removeSession(sessionId, broadcast);
    
    if (removed) {
      res.json({ 
        success: true, 
        message: 'Sess√£o removida com sucesso!' 
      });
    } else {
      res.status(404).json({ 
        error: 'Sess√£o n√£o encontrada' 
      });
    }

  } catch (error: any) {
    console.error('Erro ao remover sess√£o:', error);
    
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Get session stats
app.get('/api/sessions/stats', (req: Request, res: Response) => {
  try {
    const stats = sessionManager.getStats();
    
    res.json({ 
      success: true, 
      stats 
    });

  } catch (error: any) {
    console.error('Erro ao obter estat√≠sticas:', error);
    
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// ==========================================
// ENDPOINT DE VALIDA√á√ÉO DE SESS√ÉO
// ==========================================

// Validate session endpoint
app.get('/api/session/:sessionId/validate', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'sessionId √© obrigat√≥rio'
      });
    }

    // Verificar se a sess√£o existe e ainda √© v√°lida
    const isValid = await sessionManager.isSessionValid(sessionId);
    
    if (isValid) {
      const session = sessionManager.getSession(sessionId);
      const pageInfo = session ? await sessionManager.getPageInfo(session.page) : null;
      
      res.json({
        success: true,
        valid: true,
        sessionId,
        pageInfo
      });
    } else {
      res.status(404).json({
        success: false,
        valid: false,
        error: 'Sess√£o n√£o encontrada ou inv√°lida',
        sessionExpired: true
      });
    }

  } catch (error: any) {
    console.error('Erro ao validar sess√£o:', error);
    
    res.status(500).json({
      success: false,
      valid: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// ==========================================
// ENDPOINTS DE GRAVA√á√ÉO
// ==========================================

// Start recording
app.post('/api/recording/start', async (req: Request, res: Response) => {
  try {
    const { sessionId, config } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({ 
        success: false,
        error: 'sessionId √© obrigat√≥rio' 
      });
    }

    // Verificar se a sess√£o existe
    const session = sessionManager.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true
      });
    }

    // Verificar se j√° existe grava√ß√£o ativa para esta sess√£o
    const existingRecording = Array.from(activeRecordings.values())
      .find(rec => rec.sessionId === sessionId && rec.status === 'recording');
    
    if (existingRecording) {
      return res.status(409).json({
        success: false,
        error: 'J√° existe uma grava√ß√£o ativa para esta sess√£o',
        recordingId: existingRecording.id
      });
    }

    // Gerar ID da grava√ß√£o
    const recordingId = generateRecordingId();
    
    // Configura√ß√£o padr√£o da grava√ß√£o (otimizada)
    const recordingConfig: RecordingConfig = {
      sessionId,
      events: config?.events || ['click', 'navigation', 'form_submit', 'form'],
      mode: config?.mode || 'smart',
      delay: config?.delay || 300, // Reduzido para melhor responsividade
      captureScreenshots: config?.captureScreenshots || false,
      screenshotInterval: config?.screenshotInterval || 5000,
      maxDuration: config?.maxDuration,
      maxEvents: config?.maxEvents || 1500 // Aumentado para suportar mais eventos
    };

    // Obter informa√ß√µes da p√°gina atual
    const pageUrl = await session.page.url();
    const pageTitle = await session.page.title();
    const viewport = await session.page.viewport();

    // Criar dados da grava√ß√£o
    const recordingData: RecordingData = {
      id: recordingId,
      sessionId,
      config: recordingConfig,
      events: [],
      startTime: Date.now(),
      status: 'recording' as RecordingStatus,
      metadata: {
        userAgent: await session.page.evaluate(() => navigator.userAgent),
        viewport: viewport ? { width: viewport.width, height: viewport.height } : undefined,
        initialUrl: pageUrl,
        totalEvents: 0,
        totalScreenshots: 0
      }
    };

    // Armazenar grava√ß√£o ativa
    activeRecordings.set(recordingId, recordingData);

    // Criar e iniciar servi√ßo de grava√ß√£o
    const recordingService = new RecordingService(session.page, recordingData, broadcast);
    activeRecordingServices.set(recordingId, recordingService);

    // Iniciar captura de eventos
    await recordingService.startCapture();

    console.log(`üî¥ Grava√ß√£o iniciada: ${recordingId} para sess√£o: ${sessionId}`);

    const response: StartRecordingResponse = {
      recordingId,
      sessionId,
      message: 'Grava√ß√£o iniciada com sucesso!',
      config: recordingConfig
    };

    res.json({
      success: true,
      ...response
    });

  } catch (error: any) {
    console.error('Erro ao iniciar grava√ß√£o:', error);
    
    broadcast({
      type: 'error',
      message: `‚ùå Erro ao iniciar grava√ß√£o: ${error.message}`
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Stop recording
app.post('/api/recording/stop', async (req: Request, res: Response) => {
  try {
    const { recordingId } = req.body;
    
    if (!recordingId) {
      return res.status(400).json({
        success: false,
        error: 'recordingId √© obrigat√≥rio'
      });
    }

    const recording = activeRecordings.get(recordingId);
    const recordingService = activeRecordingServices.get(recordingId);
    
    if (!recording || !recordingService) {
      return res.status(404).json({
        success: false,
        error: 'Grava√ß√£o n√£o encontrada'
      });
    }

    // Parar captura de eventos
    await recordingService.stopCapture();

    // Atualizar dados da grava√ß√£o
    const updatedRecording = recordingService.getRecordingData();
    const endTime = Date.now();
    updatedRecording.status = 'stopped';
    updatedRecording.endTime = endTime;
    updatedRecording.duration = endTime - updatedRecording.startTime;
    updatedRecording.metadata.totalEvents = updatedRecording.events.length;

    // Atualizar no store
    activeRecordings.set(recordingId, updatedRecording);
    
    // Remover servi√ßo ativo
    activeRecordingServices.delete(recordingId);

    // Calcular estat√≠sticas
    const eventsByType: Record<string, number> = {};
    let screenshotCount = 0;

    updatedRecording.events.forEach(event => {
      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;
      if (event.screenshot) screenshotCount++;
    });

    const stats = {
      totalEvents: updatedRecording.events.length,
      eventsByType,
      duration: updatedRecording.duration || 0,
      averageEventInterval: updatedRecording.events.length > 1 ? 
        (updatedRecording.duration || 0) / (updatedRecording.events.length - 1) : 0,
      screenshotCount
    };

    console.log(`‚èπÔ∏è Grava√ß√£o finalizada: ${recordingId} - ${stats.totalEvents} eventos`);

    const response: StopRecordingResponse = {
      recordingId,
      message: 'Grava√ß√£o finalizada com sucesso!',
      stats,
      recording: updatedRecording
    };

    res.json({
      success: true,
      ...response
    });

  } catch (error: any) {
    console.error('Erro ao parar grava√ß√£o:', error);
    
    broadcast({
      type: 'error',
      message: `‚ùå Erro ao parar grava√ß√£o: ${error.message}`
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Pause/Resume recording
app.post('/api/recording/pause', async (req: Request, res: Response) => {
  try {
    const { recordingId } = req.body;
    
    if (!recordingId) {
      return res.status(400).json({
        success: false,
        error: 'recordingId √© obrigat√≥rio'
      });
    }

    const recording = activeRecordings.get(recordingId);
    const recordingService = activeRecordingServices.get(recordingId);
    
    if (!recording || !recordingService) {
      return res.status(404).json({
        success: false,
        error: 'Grava√ß√£o n√£o encontrada'
      });
    }

    const currentTime = Date.now();
    let newStatus: RecordingStatus;
    let message: string;
    let pausedAt: number | undefined;
    let resumedAt: number | undefined;

    if (recording.status === 'recording') {
      // Pausar grava√ß√£o
      recordingService.pauseCapture();
      newStatus = 'paused';
      message = 'Grava√ß√£o pausada';
      pausedAt = currentTime;
    } else if (recording.status === 'paused') {
      // Resumir grava√ß√£o
      recordingService.resumeCapture();
      newStatus = 'recording';
      message = 'Grava√ß√£o resumida';
      resumedAt = currentTime;
    } else {
      return res.status(400).json({
        success: false,
        error: `N√£o √© poss√≠vel pausar/resumir grava√ß√£o com status: ${recording.status}`
      });
    }

    // Atualizar status no store
    recording.status = newStatus;
    activeRecordings.set(recordingId, recording);

    // Broadcast status
    broadcast({
      type: 'recording_status',
      message: `${newStatus === 'paused' ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'} ${message}: ${recordingId}`,
      sessionId: recording.sessionId,
      recordingId,
      data: { status: newStatus, recordingId }
    });

    console.log(`${newStatus === 'paused' ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'} ${message}: ${recordingId}`);

    const response: PauseRecordingResponse = {
      recordingId,
      message,
      status: newStatus,
      pausedAt,
      resumedAt
    };

    res.json({
      success: true,
      ...response
    });

  } catch (error: any) {
    console.error('Erro ao pausar/resumir grava√ß√£o:', error);
    
    broadcast({
      type: 'error',
      message: `‚ùå Erro ao pausar/resumir grava√ß√£o: ${error.message}`
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Get recording status
app.get('/api/recording/status/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'sessionId √© obrigat√≥rio'
      });
    }

    // Buscar grava√ß√£o ativa para a sess√£o
    const recording = Array.from(activeRecordings.values())
      .find(rec => rec.sessionId === sessionId);

    if (!recording) {
      return res.json({
        success: true,
        recordingId: null,
        status: 'idle' as RecordingStatus,
        stats: {
          totalEvents: 0,
          eventsByType: {},
          duration: 0,
          averageEventInterval: 0,
          screenshotCount: 0
        },
        isActive: false
      });
    }

    // Calcular estat√≠sticas atuais
    const eventsByType: Record<string, number> = {};
    let screenshotCount = 0;

    recording.events.forEach(event => {
      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;
      if (event.screenshot) screenshotCount++;
    });

    const currentTime = Date.now();
    const duration = recording.status === 'stopped' ? 
      (recording.duration || 0) : 
      (currentTime - recording.startTime);

    const stats = {
      totalEvents: recording.events.length,
      eventsByType,
      duration,
      averageEventInterval: recording.events.length > 1 ? 
        duration / (recording.events.length - 1) : 0,
      screenshotCount
    };

    const response: RecordingStatusResponse = {
      recordingId: recording.id,
      status: recording.status,
      stats,
      currentEvent: recording.events[recording.events.length - 1],
      isActive: recording.status === 'recording' || recording.status === 'paused'
    };

    res.json({
      success: true,
      ...response
    });

  } catch (error: any) {
    console.error('Erro ao obter status da grava√ß√£o:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// ==========================================
// ENDPOINTS DE PREVIEW
// ==========================================

// Capturar screenshot da sess√£o ativa
app.post('/api/recording/screenshot/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    const { quality = 80, fullPage = false } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'sessionId √© obrigat√≥rio'
      });
    }

    // Verificar se a sess√£o existe
    const session = sessionManager.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true
      });
    }

    // Verificar se a sess√£o ainda est√° ativa
    const isValid = await sessionManager.isSessionValid(sessionId);
    if (!isValid) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o foi fechada ou n√£o est√° mais ativa',
        sessionExpired: true
      });
    }

    console.log(`üì∏ Capturando screenshot da sess√£o: ${sessionId}`);
    
    // Capturar screenshot
    const screenshot = await session.page.screenshot({
      type: 'jpeg',
      encoding: 'base64',
      fullPage,
      quality: Math.min(Math.max(quality, 10), 100) // Limitar entre 10-100
    });

    // Obter informa√ß√µes da p√°gina
    const pageUrl = await session.page.url();
    const pageTitle = await session.page.title();
    const viewport = await session.page.viewport();

    const response = {
      success: true,
      screenshot: `data:image/jpeg;base64,${screenshot}`,
      metadata: {
        url: pageUrl,
        title: pageTitle,
        viewport,
        timestamp: Date.now(),
        quality,
        fullPage,
        size: Math.round((screenshot.length * 3) / 4 / 1024) // Tamanho aproximado em KB
      }
    };

    res.json(response);

    console.log(`‚úÖ Screenshot capturado: ${response.metadata.size}KB`);

  } catch (error: any) {
    console.error('‚ùå Erro ao capturar screenshot:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Obter √∫ltimo screenshot/preview da sess√£o
app.get('/api/recording/preview/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'sessionId √© obrigat√≥rio'
      });
    }

    // Verificar se a sess√£o existe
    const session = sessionManager.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true
      });
    }

    // Verificar se a sess√£o ainda est√° ativa
    const isValid = await sessionManager.isSessionValid(sessionId);
    if (!isValid) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o foi fechada ou n√£o est√° mais ativa',
        sessionExpired: true
      });
    }

    // Capturar screenshot atual (preview r√°pido)
    const screenshot = await session.page.screenshot({
      type: 'jpeg',
      encoding: 'base64',
      fullPage: false,
      quality: 60 // Qualidade menor para preview r√°pido
    });

    // Obter informa√ß√µes b√°sicas da p√°gina
    const pageUrl = await session.page.url();
    const pageTitle = await session.page.title();

    const response = {
      success: true,
      preview: `data:image/jpeg;base64,${screenshot}`,
      metadata: {
        url: pageUrl,
        title: pageTitle,
        timestamp: Date.now(),
        isPreview: true
      }
    };

    res.json(response);

  } catch (error: any) {
    console.error('‚ùå Erro ao obter preview:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Obter informa√ß√µes da p√°gina atual da sess√£o
app.get('/api/recording/page-info/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'sessionId √© obrigat√≥rio'
      });
    }

    // Verificar se a sess√£o existe
    const session = sessionManager.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true
      });
    }

    // Obter informa√ß√µes detalhadas da p√°gina
    const pageUrl = await session.page.url();
    const pageTitle = await session.page.title();
    const viewport = await session.page.viewport();

    // Obter m√©tricas de performance se dispon√≠vel
    let metrics = null;
    try {
      const performanceMetrics = await session.page.metrics();
      metrics = performanceMetrics;
    } catch (error) {
      // M√©tricas podem n√£o estar dispon√≠veis em alguns casos
    }

    const response = {
      success: true,
      pageInfo: {
        url: pageUrl,
        title: pageTitle,
        viewport,
        timestamp: Date.now(),
        metrics
      }
    };

    res.json(response);

  } catch (error: any) {
    console.error('‚ùå Erro ao obter informa√ß√µes da p√°gina:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// ==========================================
// ENDPOINTS DE EXPORTA√á√ÉO
// ==========================================

// Exportar grava√ß√£o
app.post('/api/recording/export', async (req: Request, res: Response) => {
  try {
    const { recordingId, options } = req.body;
    
    if (!recordingId) {
      return res.status(400).json({
        success: false,
        error: 'recordingId √© obrigat√≥rio'
      });
    }

    if (!options || !options.format) {
      return res.status(400).json({
        success: false,
        error: 'options.format √© obrigat√≥rio'
      });
    }

    // Buscar grava√ß√£o (primeiro em ativas, depois em finalizadas)
    let recording = activeRecordings.get(recordingId);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        error: 'Grava√ß√£o n√£o encontrada'
      });
    }

    // Validar op√ß√µes de exporta√ß√£o
    try {
      ExportService.validateExportOptions(options);
    } catch (validationError: any) {
      return res.status(400).json({
        success: false,
        error: `Op√ß√µes inv√°lidas: ${validationError.message}`
      });
    }

    console.log(`üì§ Iniciando exporta√ß√£o: ${recordingId} -> ${options.format}`);

    // Exportar grava√ß√£o
    const exportResult = await ExportService.exportRecording(recording, options);

    // Broadcast sucesso
    broadcast({
      type: 'success',
      message: `üì§ Exporta√ß√£o conclu√≠da: ${exportResult.filename}`,
      sessionId: recording.sessionId,
      recordingId,
      data: {
        format: exportResult.format,
        size: exportResult.size,
        filename: exportResult.filename
      }
    });

    res.json({
      success: true,
      ...exportResult
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao exportar grava√ß√£o:', error);
    
    broadcast({
      type: 'error',
      message: `‚ùå Erro na exporta√ß√£o: ${error.message}`
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Listar grava√ß√µes dispon√≠veis para exporta√ß√£o
app.get('/api/recordings', async (req: Request, res: Response) => {
  try {
    const recordings = Array.from(activeRecordings.values()).map(recording => ({
      id: recording.id,
      sessionId: recording.sessionId,
      createdAt: recording.startTime,
      duration: recording.duration,
      eventCount: recording.events.length,
      status: recording.status,
      metadata: {
        initialUrl: recording.metadata.initialUrl,
        totalEvents: recording.metadata.totalEvents
      }
    }));

    res.json({
      success: true,
      recordings,
      total: recordings.length
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao listar grava√ß√µes:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Obter grava√ß√£o espec√≠fica
app.get('/api/recording/:recordingId', async (req: Request, res: Response) => {
  try {
    const { recordingId } = req.params;
    
    const recording = activeRecordings.get(recordingId);
    
    if (!recording) {
      return res.status(404).json({
        success: false,
        error: 'Grava√ß√£o n√£o encontrada'
      });
    }

    res.json({
      success: true,
      recording
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao obter grava√ß√£o:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// ==========================================
// ENDPOINTS DE REPRODU√á√ÉO
// ==========================================

// Reproduzir grava√ß√£o
app.post('/api/recording/playback/start', async (req: Request, res: Response) => {
  try {
    const { recordingId, sessionId, config } = req.body;
    
    if (!recordingId || !sessionId) {
      return res.status(400).json({
        success: false,
        error: 'recordingId e sessionId s√£o obrigat√≥rios'
      });
    }

    // Verificar se a sess√£o existe
    const session = sessionManager.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Sess√£o n√£o encontrada',
        sessionExpired: true
      });
    }

    // Verificar se a grava√ß√£o existe
    const recording = activeRecordings.get(recordingId);
    if (!recording) {
      return res.status(404).json({
        success: false,
        error: 'Grava√ß√£o n√£o encontrada'
      });
    }

    // Verificar se j√° existe reprodu√ß√£o ativa
    if (activePlaybackServices.has(recordingId)) {
      return res.status(409).json({
        success: false,
        error: 'Reprodu√ß√£o j√° est√° em andamento para esta grava√ß√£o'
      });
    }

    // Configura√ß√£o padr√£o de reprodu√ß√£o
    const playbackConfig: PlaybackConfig = {
      speed: config?.speed || 1,
      pauseOnError: config?.pauseOnError !== false,
      skipScreenshots: config?.skipScreenshots || false,
      startFromEvent: config?.startFromEvent,
      endAtEvent: config?.endAtEvent
    };

    // Criar e iniciar servi√ßo de reprodu√ß√£o
    const playbackService = new PlaybackService(session.page, recording, playbackConfig, broadcast);
    activePlaybackServices.set(recordingId, playbackService);

    // Iniciar reprodu√ß√£o
    await playbackService.startPlayback();

    console.log(`‚ñ∂Ô∏è Reprodu√ß√£o iniciada para grava√ß√£o: ${recordingId}`);

    res.json({
      success: true,
      message: 'Reprodu√ß√£o iniciada com sucesso!',
      recordingId,
      sessionId,
      config: playbackConfig,
      status: playbackService.getStatus()
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao iniciar reprodu√ß√£o:', error);
    
    broadcast({
      type: 'error',
      message: `‚ùå Erro ao iniciar reprodu√ß√£o: ${error.message}`
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Controlar reprodu√ß√£o (pause/resume)
app.post('/api/recording/playback/control', async (req: Request, res: Response) => {
  try {
    const { recordingId, action } = req.body;
    
    if (!recordingId || !action) {
      return res.status(400).json({
        success: false,
        error: 'recordingId e action s√£o obrigat√≥rios'
      });
    }

    const playbackService = activePlaybackServices.get(recordingId);
    if (!playbackService) {
      return res.status(404).json({
        success: false,
        error: 'Reprodu√ß√£o n√£o encontrada'
      });
    }

    let message: string;
    
    switch (action) {
      case 'pause':
        playbackService.pausePlayback();
        message = 'Reprodu√ß√£o pausada';
        break;
      
      case 'resume':
        playbackService.resumePlayback();
        message = 'Reprodu√ß√£o resumida';
        break;
      
      case 'stop':
        playbackService.stopPlayback();
        activePlaybackServices.delete(recordingId);
        message = 'Reprodu√ß√£o parada';
        break;
      
      default:
        return res.status(400).json({
          success: false,
          error: `A√ß√£o inv√°lida: ${action}`
        });
    }

    res.json({
      success: true,
      message,
      recordingId,
      action,
      status: playbackService.getStatus()
    });

  } catch (error: any) {
    console.error('‚ùå Erro no controle de reprodu√ß√£o:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Navegar na reprodu√ß√£o
app.post('/api/recording/playback/seek', async (req: Request, res: Response) => {
  try {
    const { recordingId, eventIndex } = req.body;
    
    if (!recordingId || eventIndex === undefined) {
      return res.status(400).json({
        success: false,
        error: 'recordingId e eventIndex s√£o obrigat√≥rios'
      });
    }

    const playbackService = activePlaybackServices.get(recordingId);
    if (!playbackService) {
      return res.status(404).json({
        success: false,
        error: 'Reprodu√ß√£o n√£o encontrada'
      });
    }

    await playbackService.seekToEvent(eventIndex);

    res.json({
      success: true,
      message: `Navegado para evento ${eventIndex + 1}`,
      recordingId,
      eventIndex,
      status: playbackService.getStatus()
    });

  } catch (error: any) {
    console.error('‚ùå Erro na navega√ß√£o da reprodu√ß√£o:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Obter status da reprodu√ß√£o
app.get('/api/recording/playback/status/:recordingId', async (req: Request, res: Response) => {
  try {
    const { recordingId } = req.params;
    
    const playbackService = activePlaybackServices.get(recordingId);
    
    if (!playbackService) {
      return res.json({
        success: true,
        isActive: false,
        status: null
      });
    }

    res.json({
      success: true,
      isActive: playbackService.isActive(),
      status: playbackService.getStatus()
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao obter status da reprodu√ß√£o:', error);
    
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Graceful shutdown handler
async function gracefulShutdown(signal: string) {
  console.log(`\nüõë Recebido sinal ${signal}. Iniciando shutdown gracioso...`);
  
  try {
    // 1. Parar de aceitar novas conex√µes
    console.log('üì° Fechando servidor HTTP...');
    server.close(() => {
      console.log('‚úÖ Servidor HTTP fechado');
    });

    // 2. Fechar todas as conex√µes WebSocket
    console.log('üîå Fechando conex√µes WebSocket...');
    clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.close(1000, 'Server shutdown');
      }
    });
    clients.clear();
    console.log('‚úÖ Conex√µes WebSocket fechadas');

    // 3. Parar todas as reprodu√ß√µes ativas
    if (activePlaybackServices.size > 0) {
      console.log(`üé¨ Parando ${activePlaybackServices.size} reprodu√ß√µes ativas...`);
      for (const [recordingId, playbackService] of activePlaybackServices) {
        try {
          playbackService.cleanup();
          console.log(`‚úÖ Reprodu√ß√£o ${recordingId} finalizada`);
        } catch (error) {
          console.error(`‚ùå Erro ao parar reprodu√ß√£o ${recordingId}:`, error);
        }
      }
      activePlaybackServices.clear();
      console.log('‚úÖ Reprodu√ß√µes finalizadas');
    }

    // 4. Parar todas as grava√ß√µes ativas
    if (activeRecordingServices.size > 0) {
      console.log(`üé¨ Parando ${activeRecordingServices.size} grava√ß√µes ativas...`);
      for (const [recordingId, recordingService] of activeRecordingServices) {
        try {
          await recordingService.stopCapture();
          console.log(`‚úÖ Grava√ß√£o ${recordingId} finalizada`);
        } catch (error) {
          console.error(`‚ùå Erro ao parar grava√ß√£o ${recordingId}:`, error);
        }
      }
      activeRecordingServices.clear();
      activeRecordings.clear();
      console.log('‚úÖ Grava√ß√µes finalizadas');
    }

    // 5. Fechar todas as sess√µes ativas
    if (sessionManager) {
      console.log('üßπ Limpando sess√µes ativas...');
      const stats = sessionManager.getStats();
      if (stats.totalSessions > 0) {
        console.log(`üìä Fechando ${stats.totalSessions} sess√µes ativas...`);
        await sessionManager.cleanup();
        console.log('‚úÖ Sess√µes fechadas');
      }
    }

    console.log('üéØ Shutdown gracioso conclu√≠do');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro durante shutdown:', error);
    process.exit(1);
  }
}

// Register signal handlers
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown('UNHANDLED_REJECTION');
});

// Start server
server.listen(port, () => {
  console.log(`\nüöÄ Playground Backend rodando em http://localhost:${port}`);
  console.log(`üì° WebSocket dispon√≠vel em ws://localhost:${port}/ws`);
  console.log(`\nüìã Endpoints dispon√≠veis:`);
  console.log(`   GET  /api/health - Health check`);
  console.log(`   GET  /api/docs - Documenta√ß√£o (README.md)`);
  console.log(`   GET  /api/chrome/check - Verificar Chrome`);
  console.log(`   POST /api/execute - Executar sess√£o (legacy)`);
  console.log(`   POST /api/session/create - Criar nova sess√£o`);
  console.log(`   POST /api/session/execute - Executar c√≥digo na sess√£o`);
  console.log(`   POST /api/session/screenshot - Capturar screenshot`);
  console.log(`   DELETE /api/session/:id - Remover sess√£o`);
  console.log(`   GET  /api/sessions/stats - Estat√≠sticas das sess√µes`);
  console.log(`\nüé¨ Endpoints de Grava√ß√£o:`);
  console.log(`   POST /api/recording/start - Iniciar grava√ß√£o`);
  console.log(`   POST /api/recording/stop - Parar grava√ß√£o`);
  console.log(`   POST /api/recording/pause - Pausar/resumir grava√ß√£o`);
  console.log(`   GET  /api/recording/status/:sessionId - Status da grava√ß√£o`);
  console.log(`\nüì∫ Endpoints de Preview:`);
  console.log(`   POST /api/recording/screenshot/:sessionId - Capturar screenshot da sess√£o`);
  console.log(`   GET  /api/recording/preview/:sessionId - Obter √∫ltimo screenshot`);
  console.log(`   GET  /api/recording/page-info/:sessionId - Informa√ß√µes da p√°gina`);
  console.log(`\nüì§ Endpoints de Exporta√ß√£o:`);
  console.log(`   POST /api/recording/export - Exportar grava√ß√£o (JSON/Puppeteer)`);
  console.log(`   GET  /api/recordings - Listar grava√ß√µes dispon√≠veis`);
  console.log(`   GET  /api/recording/:recordingId - Obter grava√ß√£o espec√≠fica`);
  console.log(`\n‚ñ∂Ô∏è Endpoints de Reprodu√ß√£o:`);
  console.log(`   POST /api/recording/playback/start - Iniciar reprodu√ß√£o`);
  console.log(`   POST /api/recording/playback/control - Controlar reprodu√ß√£o`);
  console.log(`   POST /api/recording/playback/seek - Navegar na reprodu√ß√£o`);
  console.log(`   GET  /api/recording/playback/status/:recordingId - Status da reprodu√ß√£o`);

  console.log(`\nüí° Para usar o playground:`);
  console.log(`   1. Execute no terminal do host:`);
  console.log(`      google-chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chrome-debug`);
  console.log(`   2. Acesse o playground em http://localhost:3000`);
  console.log(`\nüîß Para parar o servidor: Ctrl+C (shutdown gracioso habilitado)`);
});
